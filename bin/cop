#!/bin/sh
unset IFS
set -euf

usage() {
    echo "$0 <url>"
    exit 1
}

if [ "$#" -lt 1 ]; then
    usage
fi

U="$1"

# check_command returns an empty string on missing command.
# Otherwise, returns a description of the command.
check_command() {
    COMMAND="$1"
    command -v "$COMMAND" 2>/dev/null ||
        echo ''
}

curl_do() {
    URL="$1"
    curl "$URL"
}

wget_do() {
    URL="$1"
    wget -O- "$URL"
}

http_do() {
    URL="$1"
    http "$URL"
}

lftp_do() {
    URL="$1"
    lftp -c "cat $URL"
}

aria2c_do() {
    URL="$1"
    UUID="$(uuidgen)"
    F="/tmp/$UUID"

    # shellcheck disable=SC2064
    trap "rm $F" EXIT

    aria2c \
        -d /tmp \
        -o "$UUID" \
        "$URL" \
        1>&2

    cat "$F"
}

httrack_do() {
    URL="$1"
    UUID="$(uuidgen)"
    DIR="/tmp/$UUID"

    # shellcheck disable=SC2064
    trap "rm -rf $DIR" EXIT

    httrack \
        -g \
        -O "$DIR" \
        "$URL" \
        1>&2

    find "$DIR" -type f -exec cat '{}' \;
}

lynx_do() {
    URL="$1"
    lynx -source "$URL"
}

links_do() {
    URL="$1"
    links -source "$URL"
}

ruby_do() {
    URL="$1"
    ruby \
        -e "require 'open-uri'; URI.open(\"${URL}\") { |f| STDOUT.write f.read }"
}

python_do() {
    URL="$1"
    python \
        -c "import sys, urllib.request; sys.stdout.buffer.write(urllib.request.urlopen(\"$1\").read())"
}

node_do() {
    URL="$1"
    node \
        -e "const http = require('http'), https = require('https'), url = require('url'); const u = url.parse(\"$1\"); var client; if (u.protocol === 'https:') { client = https; } else { client = http; }; client.get(u, (res) => { res.pipe(process.stdout); });"
}

perl_do() {
    URL="$1"
    perl \
        -e "use File::Fetch; File::Fetch->new(uri => \"$1\")->fetch(to => \\\$body); print \$body;"
}

ftp_do() {
    URL="$1"
    ftp -o- "$URL"
}

CANDIDATES="curl \
    wget \
    http \
    lftp \
    aria2c \
    httrack \
    lynx \
    links \
    ruby \
    python \
    node \
    perl \
    ftp"

CLIENT=

for CANDIDATE in $CANDIDATES; do
    if [ "$(check_command "$CANDIDATE")" != '' ]; then
        CLIENT="$CANDIDATE"
        break
    fi
done

if [ "$CLIENT" = '' ]; then
    echo "Error: No HTTP client detected"
    exit 1
fi

echo "Using ${CLIENT}..." 1>&2

"${CLIENT}_do" "$U"
